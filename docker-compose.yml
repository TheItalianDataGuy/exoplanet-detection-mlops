services:
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mlops-fastapi
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./mlartifacts:/app/mlartifacts
      - ./sample_input.json:/app/sample_input.json
    env_file:
      - .env
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
    depends_on:
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mlflow:
    image: bitnami/mlflow:latest
    container_name: mlops-mlflow
    working_dir: /mlflow
    ports:
      - "5001:5000"
    volumes:
      - ./mlruns:/mlflow/mlruns
      - ./mlartifacts:/mlflow/mlartifacts
      - ./mlruns.db:/mlflow/mlruns.db
    env_file:
      - .env
    command: >
      bash -c "
        mlflow server 
        --backend-store-uri sqlite:///mlruns.db 
        --default-artifact-root /mlflow/mlartifacts 
        --host 0.0.0.0 
        --port 5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  airflow:
    image: apache/airflow:slim-latest-python3.11
    container_name: mlops-airflow
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    env_file:
      - .env
    command: >
      bash -c "
        airflow db migrate &&
        if [ ! -f /opt/airflow/airflow_created ]; then
          airflow users create \
            --username $$AIRFLOW_WWW_USER_USERNAME \
            --firstname $$AIRFLOW_WWW_USER_FIRSTNAME \
            --lastname $$AIRFLOW_WWW_USER_LASTNAME \
            --role $$AIRFLOW_WWW_USER_ROLE \
            --email $$AIRFLOW_WWW_USER_EMAIL \
            --password $$AIRFLOW_WWW_USER_PASSWORD &&
          touch /opt/airflow/airflow_created;
        fi &&
        airflow webserver --port 8080 & 
        airflow scheduler"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 20s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  airflow_logs:
  airflow_plugins:
